<%= within_layout("project") do %>

<div class="split-screen">
  <div class="left">
    <ol class="project-statistics">
      <%= project_statistics :features, :completed, :todo, :proposed, :human, :undefined %>
    </ol>
    
    <ol class="project-statistics extras">
      <%= project_statistics :started, :boundaries %>
    </ol>
    
    <input type="text" id="feature_filter" />
    
    <div id="features">
      <%= render_features(@project.features, :id => "feature_tree") %>
      <%= render_scenarios(@project.scenarios.reject(&:ignore?), :id => "feature_list") %>
    </div>
    
    <div id="controls">
      <button id="run_examples">Test Features</button>
      <div id="examples_running_message"></div>
      <a href="#reset" id="reset_tests">Reset</a>
      <!-- <p><%= image_tag "ajax-loader.gif", :id => "ajax_loader", :style => "display:none;" -%></p> -->
    </div>
  </div>
  <div class="right">
    <div id="scenario">
      <%= yield %>
    </div>
  </div>
</div>

<script type="text/javascript">
  $(function() {
    App.debug('loaded');
    RunExamples.init({
      socket_url: '<%= socket_url %>',
      project_id: <%= @project.id %>
    });
    new Collapsable('#feature_tree');
    var canRename = <%= can?(:edit, @project => Scenario) %>;
    var renamer = new Renamer();
    
    
    
    var hash = window.location.hash || '#features';
    if(hash) {
      $('a[href="' + hash + '"]').addClass('selected');
      applySelectedTagFilter(hash.substr(1));
    }
    
    $('a.project-statistic-button').click(function() {
      $('a.project-statistic-button.selected').removeClass('selected');
      $(this).addClass('selected');
      applySelectedTagFilter($(this).attr('href').substr(1));
    });
    
    function applySelectedTagFilter(tag) {
      var css = ".tag-" + tag,
          scenario,
          feature;
      switch(css) {
        case '.tag-features':    css = '.scenario';           break;
        case '.tag-proposed':    css = '.tag-new';            break;
        case '.tag-started':     css = '.tag-wip';            break;
        case '.tag-completed':   css = '.completed';          break;
        case '.tag-undefined':   css = '.empty';              break;
        case '.tag-boundaries':  css = '.tag-boundary';       break;
        case '.tag-todo':        css = '.tag-todo, .tag-wip'; break;
      }
      
      $('.scenario').each(function() {
        scenario = $(this);
        if(scenario.is(css)) {
          scenario.removeClass('filtered-by-tag');
        } else {
          scenario.addClass('filtered-by-tag');
        }
      });
      
      $('.feature').each(function() {
        feature = $(this);
        if(feature.find('.scenario:not(.filtered-by-tag)').length > 0) {
          feature.show();
        } else {
          feature.hide();
        }
      });
    }
    
    
    var $scenarios = $('a.scenario-steps-link');
    $scenarios.click(updateSelectedScenario).pjax('#scenario');
    if(canRename) { 
      $scenarios.dblclick(function() { renamer.rename(selectedItem) });
    }
    
    $('.scenario-title a').pjax('#scenario');
    
    $('a.feature-new-scenario').click(showOrHideNewScenario).pjax('#scenario');
    
    $('#scenario').delegate('a#cancel_new_scenario', 'click', function(event) {
      hideNewScenario(event);
    });
    
    
    function showOrHideNewScenario(event) {
      var a = $(this);
      if(a.hasClass('on')) {
        hideNewScenario(event);
      } else {
        showNewScenario(a);
      }
    }
    
    function hideNewScenario(event) {
      $('.feature-new-scenario').removeClass('on');
      
      $('.new-feature-placeholder').remove();
      
      // !fix! PJAX loads this link twice
      $('#scenario').html('');
      event.preventDefault();
      event.stopPropagation();
    }
    
    function showNewScenario(a) {
      selectScenario(null);
      a.addClass('on')
       .next('.scenarios').append('<li class="new-feature-placeholder">New Feature</li>');
    }
    
    
    var selectedItem = $('.scenario-steps-link.selected');
    
    function updateSelectedScenario(e) {
      var a = $(this);
      if(a.hasClass('selected')) {
        e.preventDefault();
        e.stopImmediatePropagation();
      } else {
        selectScenario(a);
      }
    }
    
    function selectScenario(a) {
      selectedItem && selectedItem.removeClass('selected');
      selectedItem = a;
      selectedItem && selectedItem.addClass('selected');
    }
    
    
    
    $(document.body).delegate('textarea', 'keyup', function(e) {
      if(e.keyCode == 13 && e.ctrlKey) {
        $(e.target).closest('form').submit();
      }
    });
    
    
    
    // !todo: these don't work unless the feature tree is focusable
    $('#features').keyup(function(e) {
      if(selectedItem) {
        (e.keyCode == 13) && canRename && renamer.rename(selectedItem);
        if(e.keyCode == 38) {
          e.preventDefault();
          e.stopImmediatePropagation();
          selectPrevious();
        }
        if(e.keyCode == 40) {
          e.preventDefault();
          e.stopImmediatePropagation();
          selectNext();
        }
      }
    });
    
    function selectPrevious() {
      selectedItem && selectedItem.up('a.scenario-steps-link').click();
    }
    
    function selectNext() {
      selectedItem && selectedItem.down('a.scenario-steps-link').click();
    }
    
    
    
    
    
    var feature_filter = $('#feature_filter'),
        feature_tree = $('#feature_tree'),
        feature_list = $('#feature_list');
    feature_filter.keyup(function(event) {
      applyFilter(feature_filter.val());
    });
    
    function applyFilter(filter) {
      if(filter.length > 0) {
        feature_tree.hide();
        feature_list.show();
        
        performFilter(filter);
      } else {
        feature_tree.show();
        feature_list.hide();
      }
    }
    
    function performFilter(filter) {
      var rx = new RegExp(filter, 'i');
      feature_list.find('li').each(function() {
        var li = $(this),
            text = li.text();
        if(rx.test(li.text())) {
          li.removeClass('filtered-by-text');
        } else {
          li.addClass('filtered-by-text');
        }
      });
    }
    
    
  });
</script>

<% end %>